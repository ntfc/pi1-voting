/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.evoting.zkp;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Arrays;
import org.cssi.numbers.CryptoNumbers;
import org.cssi.paillier.interfaces.PaillierPublicKey;
import org.evoting.exception.VariableNotSetException;
import org.utils.ByteUtils;

/**
 *
 * @author nc
 */
public class ZKPVerifier extends ZKP {

  /**
   * Create the verifier ZKP part
   * @param S Set of messages allowed
   * @param pub Paillier public key
   * @param C Encrypted message received from prover
   */
  public ZKPVerifier(BigInteger[] S, PaillierPublicKey pub, BigInteger C) {
    super(S, pub, C);
  }


  /**
   * Receive the number generated by the prover in step 1
   * <b>NOTE:</b> used by the verifier V
   * @param data
   */
  public void receiveStep1(byte[] data) {
    this.u = ByteUtils.byteToArrayBigInteger(data);
  }

  /**
   * Choose a random challenge ch, with t = n.bitLength() / 2 bits
   * <p/>
   * <b>NOTE:</b> used by the verifier V
   * @return The BigInteger as an array
   */
  public byte[] generateStep2() throws VariableNotSetException {
    if(pubKey == null)
      throw new VariableNotSetException("PaillierPublicKey not set");
    // generate a random number, with t = k/2 bits (k = bitLength(n))
    int nBits = n.bitLength() / 2;
    return CryptoNumbers.genRandomNumber(nBits, new SecureRandom()).
            toByteArray();
  }

  /**
   * Receive v and e from the prover
   * <p>
   * <b>NOTE:</b> used by the verifier V
   * @param data
   */
  public void receiveStep3(byte[][] data) {
    this.v = ByteUtils.byteToArrayBigInteger(data[0]);
    this.e = ByteUtils.byteToArrayBigInteger(data[1]);
  }

  /**
   * Verifier V verifies that the encrypted message C really lies in the set of
   * messages S
   * <b>NOTE:</b> used by the verifier V
   * @return
   */
  public boolean verify() throws VariableNotSetException {
    if(pubKey == null)
      throw new VariableNotSetException("PaillierPublicKey not set");
    boolean ret;
    // sum(ej) mod n
    BigInteger ejSum = arraySum(e).mod(n);
    // check that e = sum(ej) mod n
    ret = ch.compareTo(ejSum) == 0;

    for(int j = 0; j < e.length && ret; j++) {
      BigInteger vjN = v[j].modPow(n, nSquare);
      // vjNToCheck = u_j * (C/g^m_j)^e_j mod n^2
      BigInteger vjNToCheck = u[j].multiply(C.multiply(g.pow(S[j].intValue()).modInverse(nSquare)).modPow(e[j], nSquare)).mod(nSquare);
      // verify
      ret = vjN.compareTo(vjNToCheck) == 0;

    }
    return ret;
  }
}
